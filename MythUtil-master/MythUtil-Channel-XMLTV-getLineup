#!/usr/bin/env python3

import argparse
import sys
import json
import re
import xml.etree.ElementTree
import os
import socket
import tempfile
import errno
import hashlib
import urllib.parse
import natsort
import requests
import requests.auth

class MythTVServices():
    def __init__(self, host=None, port=None, username=None, password=None):
        if host is None:
            host = 'localhost'
        self.host = host
        if port is None:
            port = 6544
        self.port = port
        self.session = requests.Session()
        if username and password:
            self.session.auth = requests.auth.HTTPDigestAuth(username, password)
            self.request(service='Myth', api='version')

    def request(self, service=None, api=None, data={}, method=None, stream=False):
        version = '0.28'
        headers = {'User-Agent':'{} Python Services API Client'.format(version),
                   'Accept':'application/json',
                   'Accept-Encoding':'gzip,deflate'}
        if api is None:
            raise ValueError('api must be specified')
        url = 'http://{}:{}/{}/{}'.format(self.host, self.port, service, api)
        if method is None:
            if bool(data):
                method = 'post'
            else:
                method = 'get'
        if method == 'get':
            response = self.session.get(url, headers=headers, params=data, stream=stream)
        elif method == 'post':
            response = self.session.post(url, headers=headers, data=data, stream=stream)
        else:
            raise ValueError('method is not post or get: {}'.format(method))
        response.raise_for_status()
        if stream:
            response.raw.decode_content = True
            return response.raw
        else:
            return response.json()

    def Capture(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Capture', api=api, data=data, method=method, stream=stream)
    def Channel(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Channel', api=api, data=data, method=method, stream=stream)
    def Content(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Content', api=api, data=data, method=method, stream=stream)
    def Dvr(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Dvr', api=api, data=data, method=method, stream=stream)
    def Frontend(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Frontend', api=api, data=data, method=method, stream=stream)
    def Guide(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Guide', api=api, data=data, method=method, stream=stream)
    def Myth(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Myth', api=api, data=data, method=method, stream=stream)
    def Video(self, api=None, data={}, method=None, stream=False):
        return self.request(service='Video', api=api, data=data, method=method, stream=stream)

def channelNormalize(channel):
    m0 = re.match('^(\d+)$', channel)
    m1 = re.match('^(\d+)\.(\d+)$', channel)
    m2 = re.match('^(\d+)_(\d+)$', channel)
    m3 = re.match('^(\d+)-(\d+)$', channel)
    if m0:
        return '{}'.format(int(m0.group(1)))
    elif m1:
        return '{}.{}'.format(int(m1.group(1)), int(m1.group(2)))
    elif m2:
        return '{}.{}'.format(int(m2.group(1)), int(m2.group(2)))
    elif m3:
        return '{}.{}'.format(int(m3.group(1)), int(m3.group(2)))
    raise TypeError('Invalid channel: {}'.format(channel))

def channelCheck(channel):
    try:
        return channelNormalize(channel)
    except Exception:
        raise argparse.ArgumentTypeError('{} is not a valid channel'.format(channel))

def isWritable(path):
    try:
        testfile = tempfile.TemporaryFile(dir=path)
        testfile.close()
    except OSError as e:
        if e.errno == errno.EACCES:  # 13
            return False
        if e.errno == errno.ENOENT:  # 2
            return False
        e.filename = path
        raise
    return True

if __name__ == '__main__':

    parser = argparse.ArgumentParser()
    parser.add_argument('--backend', '--host', action='store', type=str, default='localhost.',
                        help='the host (backend) to access.  The default is localhost.')
    parser.add_argument('--port', action='store', type=int, default=6544,
                        help='the port to connect to on on the host.  The default is 6544')
    parser.add_argument('--username', action='store', type=str, default=None,
                        help='the username to use for host authentication')
    parser.add_argument('--password', action='store', type=str, default=None,
                        help='the password to use for host authentication')
    sourcegroup = parser.add_mutually_exclusive_group(required=True)
    sourcegroup.add_argument('--videosource-name', action='store', type=str, dest='sourceName',
                             help='the video source name')
    sourcegroup.add_argument('--videosource-id', action='store', type=int, dest='sourceId',
                             help='the video source id')
    parser.add_argument('--channel', '--channels', '--include-channel', '--include-channels',
                        nargs='+', type=channelCheck, dest='channelInclude',
                        help='list of channels to consider.  The default is all')
    parser.add_argument('--exclude-channel', '--exclude-channels', '--no-channel', '--no-channels',
                        nargs='+', type=channelCheck, dest='channelExclude',
                        help='list of channels to exclude.  The default is none')
    parser.add_argument('--add', action='store_true', default=False,
                        help='add any channels in xmltv lineup')
    parser.add_argument('--delete', action='store_true', default=False,
                        help='delete any channels not in xmltv lineup')
    parser.add_argument('--update', action='store_true', default=False,
                        help='update the channels to match xmltv lineup')
    parser.add_argument('--no-update-name', action='store_true', default=False, dest='noUpdateName',
                        help='do not update the channel name')
    parser.add_argument('--no-update-callsign', action='store_true', default=False, dest='noUpdateCallsign',
                        help='do not update the callsign')
    parser.add_argument('--no-update-icons', action='store_true', default=False, dest='noUpdateIcons',
                        help='do not update the icon')
    parser.add_argument('--no-update-xmltvid', action='store_true', default=False, dest='noUpdateXMLTVID',
                        help='do not update the xmltvid')
    parser.add_argument('--no-update-freqid', action='store_true', default=False, dest='noUpdateFreqID',
                        help='do not update the frequency id')
    parser.add_argument('--no-strict-icon-check', action='store_true', default=False, dest='noStrictIcon',
                        help='do not check remote icon against local (bypass a slow/expensive check)')
    parser.add_argument('--refresh-icons', action='store_true', default=False, dest='refreshIcons',
                        help='refresh all eligible icons')
    parser.add_argument('file', nargs='?', type=argparse.FileType('rb'), default=sys.stdin)
    args = parser.parse_args()

    s = MythTVServices(args.backend, args.port, args.username, args.password)

    try:
        hostname = s.Myth('GetHostName')['String']
    except Exception:
        print('Unable to obtain hostname from host {}:{}'.format(args.backend, args.port))
        sys.exit(1)

    # Validate sourceid/name
    mythsl = s.Channel('GetVideoSourceList')['VideoSourceList']['VideoSources']
    sourceId = None
    sourceName = None
    for source in mythsl:
        if int(source['Id']) == args.sourceId or source['SourceName'] == args.sourceName:
            sourceId = int(source['Id'])
            sourceName = source['SourceName']
            break
    if sourceId is None:
        print('Video source not found')
        sys.exit(1)

    # Get channel list for source
    mythChannelInfo = s.Channel('GetChannelInfoList', {'SourceID': sourceId, 'Details': True})['ChannelInfoList']['ChannelInfos']
    mythChannelList = []
    for mythChannel in mythChannelInfo:
        if 'ChanNum' not in mythChannel:
            continue
        c = channelNormalize(mythChannel['ChanNum'])
        if args.channelInclude is not None:
            if c not in args.channelInclude:
                continue
        if args.channelExclude is not None:
            if c in args.channelExclude:
                continue
        mythChannelList.append(mythChannel)
    mythChannelList = natsort.natsorted(mythChannelList, key=lambda c: c['ChanNum'])

    # Get channel list from get-lineup XML
    xmlLineup = []
    try:
        tree = xml.etree.ElementTree.parse(args.file)
    except xml.etree.ElementTree.ParseError:
        print("Unable to parse input file")
        sys.exit(1)
    root = tree.getroot()
    # Some file validation
    if root.tag != 'xmltv-lineups':
        print('The XMLTV get-linup file does not appear to be valid (root element is not xmltv-lineups)')
        sys.exit(1)

    for lineup in root.iter('xmltv-lineup'):
        lineupName = lineup.get('id')
        lineupType = None
        if lineup.find('type') is not None:
            lineupType = lineup.find('type').text
        if lineupType not in ['STB', 'DTV']:
            print('The XMLTV get-lineup file does not specify a supported type ({}) for lineup {}'.format(lineupType, lineupName))
            sys.exit(1)
        if lineupType in ['DTV']:                              # Future support for DVB/ATSC?
            print('The XMLTV get-lineup type ({}) for lineup {} has limited support'.format(lineupType, lineupName))

    for lineup in root.iter('xmltv-lineup'):
        for lineupEntry in lineup.iter('lineup-entry'):
            channum = None
            xmltvid = None
            callsign = None
            name = None
            icon = None
            freqid = None
            if lineupEntry.find('preset') is not None:
                channum = lineupEntry.find('preset').text
            lineupStation = lineupEntry.find('station')
            if lineupStation is not None:
                xmltvid = lineupStation.get('rfc2838', default=None)
                if lineupStation.find('name') is not None:
                    name = lineupStation.find('name').text
                if lineupStation.find('short-name') is not None:
                    callsign = lineupStation.find('short-name').text
                if lineupStation.find('logo') is not None:
                    icon = lineupStation.find('logo').get('url', default=None)
            freqid = channum
            if lineupEntry.find('stb-channel/stb-preset') is not None:
                freqid = lineupEntry.find('stb-channel/stb-preset').text
            if lineupEntry.find('atsc-channel/number') is not None:
                freqid = lineupEntry.find('atsc-channel/number').text

            # reject some malformed lineup entries
            if (freqid is None) or (freqid == ''):
                continue
            if (channum is None) or (channum == ''):
                continue

            channum = channelNormalize(channum)
            freqid = channelNormalize(freqid)
            if args.channelInclude is not None:
                if channum not in args.channelInclude:
                    continue
            if args.channelExclude is not None:
                if channum in args.channelExclude:
                    continue

            c = {}
            c['channum'] = channum
            c['xmltvid'] = xmltvid
            c['freqid'] = freqid
            c['name'] = name
            c['callsign'] = callsign
            c['icon'] = icon

            # Don't add duplicates (more common when mixing OTA DX'ers lineups?)
            for xmlChannel in xmlLineup:
                if (xmlChannel['channum'] == channum) and (xmlChannel['xmltvid'] == xmltvid) and \
                    (xmlChannel['freqid'] == freqid) and (xmlChannel['name'] == name) and \
                    (xmlChannel['callsign'] == callsign) and (xmlChannel['icon'] == icon):
                    continue

            xmlLineup.append(c)

    xmlLineup = natsort.natsorted(xmlLineup, key=lambda c: c['freqid'])

    # Check for Channels that do not exist in get-lineup XML
    for mythChannel in mythChannelList:
        found = False
        for xmlChannel in xmlLineup:
            if mythChannel['ChanNum'] == xmlChannel['channum']:
                found = True
                break
        if not found:
            print('Channel {}, callsign: "{}", name: "{}" is not in the XMLTV channel list'.format(mythChannel['ChanNum'], mythChannel['CallSign'], mythChannel['ChannelName']))
            if args.delete:
                data = {}
                data['ChannelID'] = mythChannel['ChanId']
                if bool(s.Channel('RemoveDBChannel', data)['bool']):
                    print('  Channel deleted')
                else:
                    print('  Channel deletion failed')

    # Check XMLTV channels against Channels
    for xmlChannel in xmlLineup:
        found = False
        for mythChannel in mythChannelList:
            if mythChannel['ChanNum'] == xmlChannel['channum']:
                found = True
                break
        if found:
            update = False
            # Create update object (for some reason the
            # names are not the same as a get)?
            data = {}
            # Mandatory
            data['ATSCMajorChannel']   = mythChannel['ATSCMajorChan']
            data['ATSCMinorChannel']   = mythChannel['ATSCMinorChan']
            data['ChannelID']          = mythChannel['ChanId']
            data['ChannelName']        = mythChannel['ChannelName']
            data['CallSign']           = mythChannel['CallSign']
            data['MplexID']            = mythChannel['MplexId']
            data['ServiceID']          = mythChannel['ServiceId']
            data['SourceID']           = mythChannel['SourceId']
            data['UseEIT']             = mythChannel['UseEIT']
            if (xmlChannel['icon'] is None) and (mythChannel['IconURL'] == ''):
                pass           # Nothing to see here
            elif (xmlChannel['icon'] is not None) and (mythChannel['IconURL'] == ''):
                print('Channel {} has a new icon'.format(mythChannel['ChanNum']))
                if not args.noUpdateIcons:
                    iconFilename = urllib.parse.urlparse(xmlChannel['icon'])[2].rpartition('/')[2]
                    downloadFileData = {}
                    downloadFileData['StorageGroup'] = 'ChannelIcons'
                    downloadFileData['URL'] = xmlChannel['icon']
                    if bool(s.Content('DownloadFile', downloadFileData)['bool']):
                        data['Icon'] = iconFilename
                        update = True
                    else:
                        print('   Channel {} icon download failed'.format(mythChannel['ChanNum']))
            elif (xmlChannel['icon'] is None) and (mythChannel['IconURL'] != ''):
                print('Channel {} icon is no longer valid'.format(mythChannel['ChanNum']))
                if not args.noUpdateIcons:
                    data['Icon'] = ''
                    update = True
            else:
                # xmlChannel and mythChannel both have icons.
                if not args.noStrictIcon:
                    # comparing is expensive, so allow one to accept that icons are icons
                    mythChannelIcon = None
                    for attempt in range(2):
                        try:
                            mythChannelIcon = s.Guide('GetChannelIcon', {'ChanID': mythChannel['ChanId']}, stream=True).read()
                        except requests.exceptions.RequestException:
                            mythChannelIcon = None
                        else:
                            break
                    if mythChannelIcon is None:
                        print('Channel {} icon cannot be retrieved from the backend'.format(mythChannel['ChanNum']))
                        mythChannelIcon = b''
                    mythChannelIconHash = hashlib.sha256(mythChannelIcon).hexdigest()
                    try:
                        xmlIcon = requests.get(xmlChannel['icon']).content
                    except requests.exceptions.RequestException:
                        print('Channel {} icon cannot be retrieved from source'.format(xmlChannel['icon']))
                        xmlIcon = b''
                    xmlIconHash = hashlib.sha256(xmlIcon).hexdigest()
                    if (xmlIconHash != mythChannelIconHash) or (args.refreshIcons):
                        if args.refreshIcons and (xmlIconHash == mythChannelIconHash):
                            print('Channel {} icon refresh forced'.format(mythChannel['ChanNum']))
                        else:
                            print('Channel {} icon differs from source'.format(mythChannel['ChanNum']))
                        if not args.noUpdateIcons:
                            iconFilename = urllib.parse.urlparse(xmlChannel['icon'])[2].rpartition('/')[2]
                            downloadFileData = {}
                            downloadFileData['StorageGroup'] = 'ChannelIcons'
                            downloadFileData['URL'] = xmlChannel['icon']
                            if bool(s.Content('DownloadFile', downloadFileData)['bool']):
                                data['Icon'] = iconFilename
                                update = True
                            else:
                                print('   Channel {} icon download failed'.format(mythChannel['ChanNum']))
            if xmlChannel['freqid'] != mythChannel['FrequencyId']:
                print('Channel {} with existing frequency id: "{}" has a revised frequency id: {}'.format(mythChannel['ChanNum'], mythChannel['FrequencyId'], xmlChannel['freqid']))
                if not args.noUpdateFreqID:
                    data['FrequencyID'] = xmlChannel['freqid']
                    update = True
            if xmlChannel['xmltvid'] != mythChannel['XMLTVID']:
                print('Channel {} with existing XMLTVID: "{}" has a revised XMLTVID: "{}"'.format(mythChannel['ChanNum'], mythChannel['XMLTVID'], xmlChannel['xmltvid']))
                if not args.noUpdateXMLTVID:
                    data['XMLTVID'] = xmlChannel['xmltvid']
                    update = True
            if xmlChannel['callsign'] != mythChannel['CallSign']:
                print('Channel {} with existing callsign: "{}" has a revised callsign: "{}"'.format(mythChannel['ChanNum'], mythChannel['CallSign'], xmlChannel['callsign']))
                if not args.noUpdateCallsign:
                    data['CallSign'] = xmlChannel['callsign']
                    update = True
            if xmlChannel['name'] != mythChannel['ChannelName']:
                print('Channel {} with existing name: "{}" has a new name: "{}"'.format(mythChannel['ChanNum'], mythChannel['ChannelName'], xmlChannel['name']))
                if not args.noUpdateName:
                    data['ChannelName'] = xmlChannel['name']
                    update = True
            if update and args.update:
                if bool(s.Channel('UpdateDBChannel', data)['bool']):
                    print('  Channel {} updated'.format(mythChannel['ChanNum']))
                else:
                    print('  Channel {} update failed'.format(mythChannel['ChanNum']))

        if not found:
            print('Channel {}, callsign: "{}", name: "{}" is new'.format(xmlChannel['channum'], xmlChannel['callsign'], xmlChannel['name']))
            if args.add:
                # Attempt to download icon (if not excluded)
                iconFilename = ''
                if not args.noUpdateIcons:
                    if xmlChannel['icon'] is not None:
                        downloadFileData = {}
                        downloadFileData['StorageGroup'] = 'ChannelIcons'
                        downloadFileData['URL'] = xmlChannel['icon']
                        if bool(s.Content('DownloadFile', downloadFileData)['bool']):
                            iconFilename = urllib.parse.urlparse(xmlChannel['icon'])[2].rpartition('/')[2]
                        else:
                            print('   Channel {} icon download failed'.format(xmlChannel['channum']))
                # We need to create a valid ChannelID:
                try:
                    chanId = sourceId * 10000 + int(xmlChannel['channum'])
                except Exception:
                    chanId = sourceId * 10000
                while True:
                    try:
                        data = {}
                        data['ChanID'] = chanId
                        if int(s.Channel('GetChannelInfo', data)['ChannelInfo']['ChanId']) == 0:
                            break
                    except Exception:
                        break
                    chanId += 1
                data = {}
                data['ChannelID'] = chanId
                data['SourceID'] = sourceId
                data['ChannelNumber'] = xmlChannel['channum']
                data['FrequencyID'] = xmlChannel['freqid']
                data['XMLTVID'] = xmlChannel['xmltvid']
                data['CallSign'] = xmlChannel['callsign']
                data['ChannelName'] = xmlChannel['name']
                data['Icon'] = iconFilename
                data['ATSCMajorChannel'] = 0
                data['ATSCMinorChannel'] = 0
                data['DefaultAuthority'] = ''
                data['Format'] = 'Default'
                data['visible'] = True
                data['UseEIT'] = 0
                data['MplexID'] = 0
                data['ServiceID'] = 0
                if bool(s.Channel('AddDBChannel', data)['bool']):
                    print('  Channel {} added'.format(xmlChannel['channum']))
                    mythChannel = {}
                    mythChannel['ATSCMajorChan']  = data['ATSCMajorChannel']
                    mythChannel['ATSCMinorChan']  = data['ATSCMinorChannel']
                    mythChannel['ChanId']         = data['ChannelID']
                    mythChannel['ChannelName']    = data['ChannelName']
                    mythChannel['CallSign']       = data['CallSign']
                    mythChannel['MplexId']        = data['MplexID']
                    mythChannel['ServiceId']      = data['ServiceID']
                    mythChannel['SourceId']       = data['SourceID']
                    mythChannel['UseEIT']         = data['UseEIT']
                    mythChannel['Visible']        = data['visible']
                    mythChannel['IconURL']        = data['Icon']
                    mythChannel['Format']         = data['Format']
                    mythChannel['ChanNum']        = data['ChannelNumber']
                    mythChannel['FrequencyId']    = data['FrequencyID']
                    mythChannel['FineTune']       = 0
                    mythChannel['XMLTVID']        = data['XMLTVID']
                    mythChannel['ChanFilters']    = ''
                    mythChannel['InputId']        = 0
                    mythChannel['CommFree']       = False
                    mythChannel['DefaultAuth']    = ''
                    mythChannel['Programs']       = []
                    mythChannelList.append(mythChannel)
                else:
                    print('  Channel {} addition failed'.format(xmlChannel['channum']))

    if args.add or args.delete or args.update:
        try:
            s.Dvr('RescheduleRecordings')
        except Exception:
            pass

    sys.exit(0)
